
kubectl run nginx-test --image=nginx
kubectl get pods

kubectl run httpd-test --image=httpd
kubectl get pods



kubectl exec -it nginx-test bash

kubectl delete pod  nginx-test
kubectl get po



Creation of pods:
==========================
vim pod1.yml

apiVersion: v1
kind: Pod
metadata:
  name: nginxpod
  labels:
    app: webserver
spec:
  containers:
    - image: nginx:latest
      name: nginxcontainer

Execute it:    kubectl create -f pod1.yml
Check it: kubectl get pods
------------


Multi container pod
======================

vi multipod.yml

kind: Pod
apiVersion: v1
metadata:
  name: multi-cont-pod
  namespace: default
  labels:
     app: web
spec:
  containers:
   - name: tcont
     image: tomcat
   - name: nginx
     image: nginx
   - name: ucont
     image: ubuntu


Replicaset
==============================
apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: myrs
spec:
 replicas: 3
 selector:
  matchLabels:
   app: java
 template:
  metadata:
   name: mypod
   labels:
    app: java
  spec:
   containers:
    - name: c1
      image: nginx

	# kubectl create -f rc-definition.yml
--------------------------------

Replication controller:
  -used to recreate pods if any pods die during execution

vi rc.yml

apiVersion: v1
kind: ReplicationController
metadata:
  name: rc-nginx
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80

output:
kubectl create -f filename
-------------------------------------





Deployment pods
=====================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx_deploy
  replicas: 2 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: nginx_deploy
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.8
        ports:
        - containerPort: 80
-

